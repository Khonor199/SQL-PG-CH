-- Статистика разрезов клиента и поставщика, анализ опоздавшего GMV со сдвигом

WITH weeks AS (
    SELECT week
    FROM generate_series('2023-11-01'::date, now()::date, '1 month') AS week
),
ready as (
    SELECT sum(so.delivery_cost+so.cost_net)::int as ready_count, be.legal_entity, be.client_id,
    DATE_TRUNC('month', so.create_ts) AS week
    FROM order_service.Supplier_Order so
    LEFT JOIN order_service.Order o ON so.order_id = o.id
    LEFT JOIN dictionary_service.basis b on o.basis_id = b.id
    LEFT JOIN client_service.be_basis_link bbl on  b.id = bbl.basis_id
    LEFT JOIN client_service.business_entity be on  bbl.be_id = be.id
    WHERE so.system_status NOT IN ('DRAFT', 'DECLINED', 'RETURNED', 'BOSS_WAITING', 'CANCELED', 'WAITING')
    GROUP BY DATE_TRUNC('month', so.create_ts), be.client_id, be.legal_entity
),

a as (
    SELECT sum(so.delivery_cost+so.cost_net)::int as rc_count, be.legal_entity, be.client_id,
    DATE_TRUNC('month', date_delivery) AS week
    FROM order_service.Supplier_Order so
    LEFT JOIN order_service.Order o ON so.order_id = o.id
    LEFT JOIN dictionary_service.basis b on o.basis_id = b.id
    LEFT JOIN client_service.be_basis_link bbl on  b.id = bbl.basis_id
    LEFT JOIN client_service.business_entity be on  bbl.be_id = be.id
    WHERE system_status NOT IN ('DRAFT', 'DECLINED', 'RETURNED', 'BOSS_WAITING', 'CANCELED', 'WAITING') 
    GROUP BY DATE_TRUNC('month', date_delivery), be.client_id, be.legal_entity
),

b as (
    SELECT SUM(CASE WHEN (rc_accepted_ts > date_delivery AND rc_accepted_ts IS NOT NULL) 
    OR (now() > date_delivery AND rc_accepted_ts IS NULL) 
    THEN so.delivery_cost+so.cost_net ELSE 0 END)::int AS late_to_rc,
    
    SUM(CASE WHEN (rc_accepted_ts < date_delivery AND rc_accepted_ts IS NOT NULL) 
    OR (now() < date_delivery AND rc_accepted_ts IS NULL) 
    THEN so.delivery_cost+so.cost_net ELSE 0 END)::int AS intime_to_rc,
    
    be.legal_entity, be.client_id,
    
    DATE_TRUNC('month', date_delivery) AS week
    
    FROM order_service.Supplier_Order so
    LEFT JOIN order_service.Order o ON so.order_id = o.id
    LEFT JOIN dictionary_service.basis b on o.basis_id = b.id
    LEFT JOIN client_service.be_basis_link bbl on  b.id = bbl.basis_id
    LEFT JOIN client_service.business_entity be on  bbl.be_id = be.id
    WHERE system_status NOT IN ('DRAFT', 'DECLINED', 'RETURNED', 'BOSS_WAITING', 'CANCELED', 'WAITING') 
    AND so.rc_accepted_ts IS NOT NULL
    GROUP BY DATE_TRUNC('month', date_delivery), be.legal_entity, be.client_id
),

wh_all as (
    SELECT sum(so.delivery_cost+so.cost_net)::int as wh_count, be.legal_entity, be.client_id,
    DATE_TRUNC('month', client_delivery_date ) AS week
    FROM order_service.Supplier_Order so
    LEFT JOIN order_service.Order o ON so.order_id = o.id
    LEFT JOIN dictionary_service.basis b on o.basis_id = b.id
    LEFT JOIN client_service.be_basis_link bbl on  b.id = bbl.basis_id
    LEFT JOIN client_service.business_entity be on  bbl.be_id = be.id
    WHERE system_status NOT IN ('DRAFT', 'DECLINED', 'RETURNED', 'BOSS_WAITING', 'CANCELED', 'WAITING') 
    [[and o.client_id = {{client_id}}]]
    GROUP BY DATE_TRUNC('month', client_delivery_date ), be.legal_entity, be.client_id
),

tg as (
    SELECT
    CASE WHEN (so.date_delivery < now () AND so.rc_accepted_ts IS NULL) THEN now () - so.date_delivery ELSE interval '0' END AS tg1,
    CASE WHEN (so.date_delivery < so.rc_accepted_ts AND so.rc_accepted_ts IS NOT NULL) THEN so.rc_accepted_ts - so.date_delivery ELSE interval '0' END AS tg2, -- разница
    so.id
    FROM order_service.Supplier_Order so
    LEFT JOIN order_service.Order o ON so.order_id = o.id
    
),

timegate as ( 
    SELECT
    CASE WHEN ((so.date_delivery - interval '3 days' > now () AND so.rc_accepted_ts IS NULL) -- поставщик не опоздал
    OR (so.date_delivery - interval '3 days' > so.rc_accepted_ts AND so.rc_accepted_ts IS NOT NULL))
    AND ((so.client_delivery_date + tg.tg1  < now() AND so.warehouse_delivered_ts IS NULL) -- кли опоздал
    OR (so.client_delivery_date + tg.tg2  < so.warehouse_delivered_ts AND warehouse_delivered_ts IS NOT NULL))
    THEN so.delivery_cost+so.cost_net END AS client_late,
    
    CASE WHEN ((so.date_delivery - interval '3 days' < now () AND so.rc_accepted_ts IS NULL) -- поставщик опоздал
    OR (so.date_delivery - interval '3 days' < so.rc_accepted_ts AND so.rc_accepted_ts IS NOT NULL))
    AND ((so.client_delivery_date + tg.tg1 < now() AND so.warehouse_delivered_ts IS NULL) -- кли опоздал
    OR (so.client_delivery_date + tg.tg2 < so.warehouse_delivered_ts AND warehouse_delivered_ts IS NOT NULL))
    THEN so.delivery_cost+so.cost_net END AS all_late,
    
    so.id, be.legal_entity, be.client_id
    
    FROM order_service.Supplier_Order so
    LEFT JOIN order_service.Order o ON so.order_id = o.id
    LEFT JOIN dictionary_service.basis b on o.basis_id = b.id
    LEFT JOIN client_service.be_basis_link bbl on  b.id = bbl.basis_id
    LEFT JOIN client_service.business_entity be on  bbl.be_id = be.id
    LEFT JOIN tg ON so.id = tg.id
    WHERE 1=1
    [[and o.client_id = {{client_id}}]]
),

wh as (
    SELECT
    SUM(CASE WHEN (warehouse_delivered_ts > client_delivery_date  AND warehouse_delivered_ts  IS NOT NULL) THEN so.delivery_cost+so.cost_net ELSE 0 END)::int AS late_done,-- разделить
    SUM(CASE WHEN (now() > client_delivery_date  AND warehouse_delivered_ts IS NULL) THEN so.delivery_cost+so.cost_net ELSE 0 END)::int AS late_going,
    
    SUM(CASE WHEN (warehouse_delivered_ts < client_delivery_date  AND warehouse_delivered_ts IS NOT NULL) 
    OR (now() < client_delivery_date  AND warehouse_delivered_ts IS NULL AND system_status IN ('DELIVERED', 'WAREHOUSE_DELIVERED')) 
    THEN so.delivery_cost+so.cost_net ELSE 0 END)::int AS intime_to_wh,
    
    SUM(CASE WHEN (warehouse_delivered_ts IS NULL AND (client_delivery_date  > NOW())) THEN so.delivery_cost+so.cost_net ELSE 0 END)::int  AS ongoing,
    
    SUM(timegate.client_late) client_late,
    SUM(timegate.all_late) all_late,
    
    be.legal_entity, be.client_id,
    
    DATE_TRUNC('month', client_delivery_date) AS week
    
    FROM order_service.Supplier_Order so
    LEFT JOIN order_service.Order o ON so.order_id = o.id
    LEFT JOIN dictionary_service.basis b on o.basis_id = b.id
    LEFT JOIN client_service.be_basis_link bbl on  b.id = bbl.basis_id
    LEFT JOIN client_service.business_entity be on  bbl.be_id = be.id
    LEFT JOIN timegate ON so.id = timegate.id AND o.client_id = timegate.client_id AND be.legal_entity = timegate.legal_entity
    WHERE so.system_status NOT IN ('DRAFT', 'DECLINED', 'RETURNED', 'BOSS_WAITING', 'CANCELED', 'WAITING')
    GROUP BY DATE_TRUNC('month', client_delivery_date), be.legal_entity, be.client_id
)


SELECT weeks.week as "Месяц",
wh.legal_entity,

CASE
        WHEN wh.legal_entity = 'АО "БМЗ"' THEN 'ЕХ'
        WHEN wh.legal_entity = 'АО "Ковдорский ГОК"' THEN 'ЕХ'
        WHEN wh.legal_entity = 'АО "НАК "Азот"' THEN 'ЕХ'
        WHEN wh.legal_entity = 'АО "Невинномысский Азот"' THEN 'ЕХ'
        WHEN wh.legal_entity = 'ООО «ЕвроХим-БМУ»' THEN 'ЕХ'
        WHEN wh.legal_entity = 'ООО «СИБ - ДАМЕЛЬ»' THEN 'СУЭК'
        WHEN wh.legal_entity = 'АО «СУЭК-Красноярск»' THEN 'СУЭК'
        WHEN wh.legal_entity = 'АО «СУЭК-Кузбасс»' THEN 'СУЭК'
        WHEN wh.legal_entity = 'АО «УПиР»' THEN 'СУЭК'
        WHEN wh.legal_entity = 'ООО «ЕСК-СУЭК»' THEN 'СУЭК'
        WHEN wh.legal_entity = 'ООО "ЕвроХим - УКК"' THEN 'ЕХ'
        WHEN wh.legal_entity = 'ООО "ЕвроХим-ВолгаКалий"' THEN 'ЕХ'
        WHEN wh.legal_entity = 'ООО "НевРСС"' THEN 'ЕХ'
        WHEN wh.legal_entity = 'ООО "Новомосковский хлор"' THEN 'ЕХ'
        ELSE NULL
    END AS new_column,
wh.client_id,
coalesce(ready.ready_count, 0) "GMV сформировано", 
coalesce(a.rc_count, 0) "плановое GMV на РЦ", 
coalesce(b.late_to_rc, 0) "плановое GMV на РЦ, опоздало", 
coalesce(b.intime_to_rc, 0) "плановое GMV на РЦ, вовремя", 
coalesce(wh_all.wh_count, 0) "плановое GMV у клиента", 
coalesce(wh.late_done, 0) "Опоздало, приехало",
coalesce(wh.late_going, 0) "Опоздало, в пути",
COALESCE(wh.client_late, 0)::int AS client_late,
COALESCE(wh.late_done + wh.late_going - COALESCE(wh.client_late, 0) - COALESCE(wh.all_late, 0), 0)::int AS supplier_late,
COALESCE(wh.all_late, 0)::int AS all_late,
coalesce(wh.intime_to_wh, 0) "плановое GMV у клиента, вовремя",
coalesce(wh.ongoing, 0) "Ещё в пути до клиента"

FROM weeks
LEFT JOIN ready ON weeks.week = ready.week
LEFT JOIN a ON weeks.week = a.week AND ready.client_id = a.client_id AND ready.legal_entity = a.legal_entity
LEFT JOIN b ON weeks.week = b.week AND ready.client_id = b.client_id AND ready.legal_entity = b.legal_entity
LEFT JOIN wh_all ON weeks.week = wh_all.week AND ready.client_id = wh_all.client_id AND ready.legal_entity = wh_all.legal_entity
LEFT JOIN wh ON weeks.week = wh.week AND ready.client_id = wh.client_id AND ready.legal_entity = wh.legal_entity

order by weeks.week desc