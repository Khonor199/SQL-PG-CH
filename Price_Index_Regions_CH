WITH max_dates AS (
    SELECT 
        region_id, 
        MAX(date) AS max_date
    FROM default.price_parsing
    GROUP BY region_id
),

pars AS (
    SELECT 
    pp.model_id, 
    LEAST(pp.price, pp.price2) / 1.2 AS least, 
    pp.source, 
    pp.url, 
    pp.region_id,
    ROW_NUMBER() OVER (PARTITION BY pp.model_id, pp.region_id ORDER BY LEAST(pp.price, pp.price2) / 1.2, pp.source, pp.region_id) AS rn
FROM default.price_parsing pp
JOIN max_dates md 
    ON pp.region_id = md.region_id 
    AND pp.date = md.max_date
),

a AS (
    SELECT *
    FROM pars
    WHERE rn = 1
),

b AS (
    SELECT 
        so.create_ts sub_creates, o.create_ts order_create, oi.model_id, oi.mtr_code, o.client_id, o.be_id be_id, csb.region_id,
        AVG(oi.unit_delivery_price) as unit_delivery, 
        SUM(oi.quantity) as counts, AVG(oi.unit_price) as unit_price, 
        SUM(oi.quantity * (oi.unit_price + oi.unit_delivery_price)) as GMV_delivery,
        SUM(oi.quantity * oi.unit_price) as GMV
    FROM order_service.order_item oi
    LEFT JOIN order_service.supplier_order so ON oi.supplier_order_id = so.id
    LEFT JOIN order_service.order o ON oi.order_id = o.id
    LEFT JOIN bi.source__client_service_basis csb ON o.basis_id = CAST(csb.id AS Nullable(Int64))
    WHERE so.system_status NOT IN ('CANCELED', 'DECLINED', 'DRAFT')
    GROUP BY oi.model_id, oi.mtr_code, o.client_id, so.create_ts, o.create_ts, o.be_id, csb.region_id
)

SELECT DISTINCT
    b.model_id, 
    dictGet('pim_catalog_model_dict', 'name', b.model_id) as model_name,
    b.region_id,
    dictGet('pim_catalog_category_dict', 'name', ps.category_id) as category_name,
    dictGet('pim_catalog_category_dict', 'top_name', ps.category_id) as top_category_name,
    arrayElement(splitByString(',', dictGet('pim_catalog_category_dict', 'category_path', ps.category_id)), 3) AS third_category,
    b.mtr_code as "Код ОЗМ", 
    b.client_id, 
    dictGet('client_service_business_entities_dict', 'legal_entity', b.be_id) be,
    b.sub_creates,
    b.order_create,
    b.unit_delivery as "Цена доставки единицы", 
    b.counts as "Количество заказано", 
    b.unit_price as "Цена единицы в факте без НДС", 
    b.GMV as "GMV МП",
    b.GMV_delivery,
    a.least as "МинЦена парсинга без НДС", 
    a.least * b.counts as "GMV Парсинга",
    a.source as "Сайт минимальной цены парсинга", 
    (b.unit_price / a.least - 1) * 100 as "Сравнение, %",
    
    CASE 
        WHEN ((b.unit_price / a.least - 1) * 100) > 80 THEN 'Выброс, МП дороже'
        WHEN ((b.unit_price / a.least - 1) * 100) <= 80 AND ((b.unit_price / a.least - 1) * 100) > 0 THEN 'МП дороже'
        WHEN ((b.unit_price / a.least - 1) * 100) < -60 THEN 'Выброс, МП дешевле'
        WHEN ((b.unit_price / a.least - 1) * 100) >= -60 AND ((b.unit_price / a.least - 1) * 100) <= 0 THEN 'МП дешевле'
    END AS Comment,
    
    CASE 
        WHEN ((b.unit_price / a.least - 1) * 100) > 80 THEN '1'
        WHEN ((b.unit_price / a.least - 1) * 100) <= 80 AND ((b.unit_price / a.least - 1) * 100) > 0 THEN '2'
        WHEN ((b.unit_price / a.least - 1) * 100) < -60 THEN '4'
        WHEN ((b.unit_price / a.least - 1) * 100) >= -60 AND ((b.unit_price / a.least - 1) * 100) <= 0 THEN '3'
    END AS orderby,
    
    CASE 
        WHEN ((b.unit_price / a.least - 1) * 100) > 80
        OR ((b.unit_price / a.least - 1) * 100) < -60 THEN 'Выброс'
        WHEN ((b.unit_price / a.least - 1) * 100) >= -60 AND ((b.unit_price / a.least - 1) * 100) <= 80 THEN 'Не выброс'
    END AS "Выброс",
    
    CASE
        WHEN dictGet('client_service_business_entities_dict', 'legal_entity', b.be_id) = 'АО "БМЗ"' THEN 'ЕХ'
        WHEN dictGet('client_service_business_entities_dict', 'legal_entity', b.be_id) = 'АО "Ковдорский ГОК"' THEN 'ЕХ'
        WHEN dictGet('client_service_business_entities_dict', 'legal_entity', b.be_id) = 'АО "НАК "Азот"' THEN 'ЕХ'
        WHEN dictGet('client_service_business_entities_dict', 'legal_entity', b.be_id) = 'АО "Невинномысский Азот"' THEN 'ЕХ'
        WHEN dictGet('client_service_business_entities_dict', 'legal_entity', b.be_id) = 'ООО "ЕвроХим-БМУ"' THEN 'ЕХ'
        WHEN dictGet('client_service_business_entities_dict', 'legal_entity', b.be_id) = 'ООО "СИБ - ДАМЕЛЬ"' THEN 'СУЭК'
        WHEN dictGet('client_service_business_entities_dict', 'legal_entity', b.be_id) = 'АО "СУЭК-Красноярск"' THEN 'СУЭК'
        WHEN dictGet('client_service_business_entities_dict', 'legal_entity', b.be_id) = 'АО "СУЭК-Кузбасс"' THEN 'СУЭК'
        WHEN dictGet('client_service_business_entities_dict', 'legal_entity', b.be_id) = 'АО "УПиР"' THEN 'СУЭК'
        WHEN dictGet('client_service_business_entities_dict', 'legal_entity', b.be_id) = 'ООО "ЕСК-СУЭК"' THEN 'СУЭК'
        WHEN dictGet('client_service_business_entities_dict', 'legal_entity', b.be_id) = 'ООО "ЕвроХим - УКК"' THEN 'ЕХ'
        WHEN dictGet('client_service_business_entities_dict', 'legal_entity', b.be_id) = 'ООО "ЕвроХим-ВолгаКалий"' THEN 'ЕХ'
        WHEN dictGet('client_service_business_entities_dict', 'legal_entity', b.be_id) = 'ООО "НевРСС"' THEN 'ЕХ'
        WHEN dictGet('client_service_business_entities_dict', 'legal_entity', b.be_id) = 'ООО "Новомосковский хлор"' THEN 'ЕХ'
        ELSE NULL
    END AS EXorCYEK,
    
    a.url as "Ссылка сайта"
FROM b
LEFT JOIN a ON b.model_id = a.model_id AND toString(b.region_id) = a.region_id
LEFT JOIN (SELECT model_id, category_id FROM default.price_snapshot WHERE date = today() - 1) as ps ON b.model_id = ps.model_id
WHERE a.least > 0
and dictGet('pim_catalog_category_dict', 'name', ps.category_id) NOT IN ('Без категории')
[[AND client_id = {{client_id}}]]
[[AND dictGet('pim_catalog_category_dict', 'name', a.category_id) = {{category_name}}]]
[[AND date(b.sub_creates) >= {{date}}]]
[[and LOWER(dictGet('client_service_business_entities_dict', 'legal_entity', b.be_id))  LIKE CONCAT('%',LOWER({{be}}),'%') ]]
[[AND 
    CASE 
        WHEN ((b.unit_price / a.least - 1) * 100) > 80 OR ((b.unit_price / a.least - 1) * 100) < -60 THEN 'Выброс'
        WHEN ((b.unit_price / a.least - 1) * 100) >= -60 AND ((b.unit_price / a.least - 1) * 100) <= 80 THEN 'Не выброс'
    END = {{vibros}}]]
ORDER BY b.model_id
